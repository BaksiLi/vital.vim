scriptencoding utf-8

Describe Web.URI
  Before all
    let URI = vital#of('vital').import('Web.URI')
  End

  Describe .new()
    It parses @tyru's twitter URL
      let uri = URI.new('http://twitter.com/tyru')
      Assert Equals(uri.scheme(), 'http')
      Assert Equals(uri.host(), 'twitter.com')
      Assert Equals(uri.path(), '/tyru')
      Assert Equals(uri.opaque(), '//twitter.com/tyru')
      Assert Equals(uri.fragment(), '')
      Assert Equals(uri.to_string(), 'http://twitter.com/tyru')
    End

    It parses tyru's blog URL
      let uri = URI.new('http://d.hatena.ne.jp/tyru/20100619/git_push_vim_plugins_to_github#c')
      Assert Equals(uri.scheme(), 'http')
      Assert Equals(uri.host(), 'd.hatena.ne.jp')
      Assert Equals(uri.path(), '/tyru/20100619/git_push_vim_plugins_to_github')
      Assert Equals(uri.opaque(), '//d.hatena.ne.jp/tyru/20100619/git_push_vim_plugins_to_github')
      Assert Equals(uri.fragment(), 'c')
      Assert Equals(uri.to_string(), 'http://d.hatena.ne.jp/tyru/20100619/git_push_vim_plugins_to_github#c')
    End

    It builds URI with given parts
      let uri = URI.new('http://twitter.com/tyru')
      call uri.scheme('ftp')
      Assert Equals(uri.scheme(), 'ftp')
      Assert Equals(uri.to_string(), 'ftp://twitter.com/tyru')
      call uri.host('ftp.vim.org')
      Assert Equals(uri.host(), 'ftp.vim.org')
      Assert Equals(uri.to_string(), 'ftp://ftp.vim.org/tyru')
      call uri.path('pub/vim/unix/vim-7.3.tar.bz2')
      Assert Equals(uri.path(), '/pub/vim/unix/vim-7.3.tar.bz2')
      Assert Equals(uri.to_string(), 'ftp://ftp.vim.org/pub/vim/unix/vim-7.3.tar.bz2')
      call uri.path('/pub/vim/unix/vim-7.3.tar.bz2')
      " uri.path() ignores head slashes.
      Assert Equals(uri.path(), '/pub/vim/unix/vim-7.3.tar.bz2')
      Assert Equals(uri.to_string(), 'ftp://ftp.vim.org/pub/vim/unix/vim-7.3.tar.bz2')
    End

    It modifies URI with given parts
      let uri = URI.new('http://d.hatena.ne.jp/tyru/20100619/git_push_vim_plugins_to_github#c')
      call uri.scheme('https')
      Assert Equals(uri.scheme(), 'https')
      Assert Equals(uri.to_string(), 'https://d.hatena.ne.jp/tyru/20100619/git_push_vim_plugins_to_github#c')
      call uri.host('github.com')
      Assert Equals(uri.host(), 'github.com')
      Assert Equals(uri.to_string(), 'https://github.com/tyru/20100619/git_push_vim_plugins_to_github#c')
      call uri.path('tyru/urilib.vim/blob/master/autoload/urilib.vim')
      Assert Equals(uri.path(), '/tyru/urilib.vim/blob/master/autoload/urilib.vim')
      Assert Equals(uri.to_string(), 'https://github.com/tyru/urilib.vim/blob/master/autoload/urilib.vim#c')
      call uri.fragment('L32')
      Assert Equals(uri.fragment(), 'L32')
      Assert Equals(uri.to_string(), 'https://github.com/tyru/urilib.vim/blob/master/autoload/urilib.vim#L32')
      call uri.fragment('#L32')
      " uri.fragment({fragment}) ignores head # characters.
      Assert Equals(uri.fragment(), 'L32')
      Assert Equals(uri.to_string(), 'https://github.com/tyru/urilib.vim/blob/master/autoload/urilib.vim#L32')
    End
  End

  Describe .is_uri()
    It checks valid URI
      Assert True(URI.is_uri('http://twitter.com/tyru'))
      Assert True(URI.is_uri('http://d.hatena.ne.jp/tyru/20100619/git_push_vim_plugins_to_github#c'))
      Assert True(URI.is_uri('file://baz/'))
      Assert True(URI.is_uri('file:///home/tyru/'))
      Assert True(URI.is_uri('file:///home/tyru'))
      Assert True(URI.is_uri('ftp://withoutslash.com'))
    End

    It checks invalid URI
      Assert False(URI.is_uri('foo'))
      Assert False(URI.is_uri('/bar'))
    End
  End

  Describe .encode()
    It encodes string to Percent-encoding string
      Assert Equals(URI.encode('abc12390'), 'abc12390')
      Assert Equals(URI.encode("abc\x01\x0a\x0d AB-"), 'abc%01%0A%0D%20AB-')
      Assert Equals(URI.encode("\xA4\xC1\xA4\xE3"), '%A4%C1%A4%E3')
      Assert Equals(URI.encode("\xA4\xC1\xA4\xE5"), '%A4%C1%A4%E5')
      Assert Equals(URI.encode("\xA4\xC1\xA4\xE7"), '%A4%C1%A4%E7')
    End

    It encodes the reserved characters in RFC3986
      Assert Equals(URI.encode(':/?#[]@'), '%3A%2F%3F%23%5B%5D%40')
      Assert Equals(URI.encode("!$&'()*+,;="), '%21%24%26%27%28%29%2A%2B%2C%3B%3D')
      Assert Equals(URI.encode('%'), '%25')
    End

    It does not change the unreserved characters in RFC3986
      for s in ['1234567890',
      \  'abcdefghijklmnopqrstuvwxyz',
      \  'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
      \  '._-~',
      \  'abc1.2345_ABCD-EZY']
        Assert Equals(URI.encode(s), s)
      endfor
    End

    Context with {char-enc}
      Context is omitted
        It is treated as "utf-8"
          Assert Equals(URI.encode('あいうえお'), '%E3%81%82%E3%81%84%E3%81%86%E3%81%88%E3%81%8A')
        End
      End

      Context is cp932
        It converts {str} to cp932
          Assert Equals(URI.encode('あいうえお', 'cp932'), '%82%A0%82%A2%82%A4%82%A6%82%A8')
        End
      End

      Context is empty
        Before
          let cp932 = iconv('あいうえお', 'utf-8', 'cp932')
          let encoding = &encoding
          set encoding=cp932
        End
        After
          let &encoding = encoding
        End

        It never converts character encoding
          Assert Equals(URI.encode(cp932), '%E3%81%82%E3%81%84%E3%81%86%E3%81%88%E3%81%8A')
          Assert Equals(URI.encode(cp932, ''), '%82%A0%82%A2%82%A4%82%A6%82%A8')
        End
      End
    End
  End

  Describe .decode()
    It decodes string that is encoded by Percent-encoding
      Assert Equals(URI.decode('1234567890'), '1234567890')
      Assert Equals(URI.decode('abc12390'), 'abc12390')
      Assert Equals(URI.decode('%A4%C1%A4%E3'), "\xA4\xC1\xA4\xE3")
      Assert Equals(URI.decode('%A4%C1%A4%E5'), "\xA4\xC1\xA4\xE5")
      Assert Equals(URI.decode('%A4%C1%A4%E7'), "\xA4\xC1\xA4\xE7")
    End

    It does not change the unreserved characters
      for s in ['1234567890',
      \  'abcdefghijklmnopqrstuvwxyz',
      \  'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
      \  'abc12345ABCDEZY',
      \  '._-~',
      \  'abc1.2345_ABCD-EZY']
        Assert Equals(URI.decode(s), s)
      endfor
    End

    It encodes and decodes string
      for s in ['1234567890',
      \  'abcdefghijklmnopqrstuvwxyz',
      \  'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
      \  'abc12345ABCDEZY',
      \  '%123ABC!"#$%&''()~=-~^|\\[]@:;+<>/\',
      \  'あいうえお',
      \  'ちゃちゅちょ']
        Assert Equals(URI.decode(URI.encode(s)), s)
      endfor
    End

    Context with {char-enc}
      Context is omitted
        It is treated as "utf-8"
          Assert Equals(URI.decode('%E3%81%82%E3%81%84%E3%81%86%E3%81%88%E3%81%8A'), 'あいうえお')
        End
      End

      Context is cp932
        It converts {str} to cp932
          Assert Equals(URI.decode('%82%A0%82%A2%82%A4%82%A6%82%A8', 'cp932'), 'あいうえお')
        End
      End

      Context is empty
        Before
          let cp932 = iconv('あいうえお', 'utf-8', 'cp932')
          let encoding = &encoding
          set encoding=cp932
        End
        After
          let &encoding = encoding
        End

        It never converts character encoding
          Assert Equals(URI.decode('%E3%81%82%E3%81%84%E3%81%86%E3%81%88%E3%81%8A'), cp932)
          Assert Equals(URI.decode('%82%A0%82%A2%82%A4%82%A6%82%A8', ''), cp932)
        End
      End
    End
  End
End
