Describe Stream
  Before all
    let Stream = vital#vital#new().import('Stream')
  End

  Describe .of()
    It constructs stream from arguments
      Assert Equals(Stream.of().count(), 0)
      Assert Equals(Stream.of().to_list(), [])
      Assert Equals(Stream.of(1).count(), 1)
      Assert Equals(Stream.of(1).to_list(), [1])
      Assert Equals(Stream.of(1,2,3).count(), 3)
      Assert Equals(Stream.of(1,2,3).to_list(), [1,2,3])
    End
  End

  Describe .from_chars()
    It constructs stream from String
      Assert Equals(Stream.from_chars("").count(), 0)
      Assert Equals(Stream.from_chars("").to_list(), [])
      Assert Equals(Stream.from_chars("a").count(), 1)
      Assert Equals(Stream.from_chars("a").to_list(), ['a'])
      Assert Equals(Stream.from_chars("abc").count(), 3)
      Assert Equals(Stream.from_chars("abc").to_list(), ['a', 'b', 'c'])
    End
    It constructs stream from String with characteristics
      let s = Stream.from_chars("abc", 0)
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 0)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 0)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 0)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 0)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 0)
      let s = Stream.from_chars("abc", Stream.ORDERED() + Stream.DISTINCT() + Stream.SORTED() + Stream.SIZED() + Stream.IMMUTABLE())
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 1)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 1)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 1)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 1)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 1)
      unlet s
    End
  End

  Describe .from_list()
    It constructs stream from List
      Assert Equals(Stream.from_list([]).count(), 0)
      Assert Equals(Stream.from_list([]).to_list(), [])
      Assert Equals(Stream.from_list([1]).count(), 1)
      Assert Equals(Stream.from_list([1]).to_list(), [1])
      Assert Equals(Stream.from_list([1,2,3]).count(), 3)
      Assert Equals(Stream.from_list([1,2,3]).to_list(), [1,2,3])
    End
    It constructs stream from List with characteristics
      let s = Stream.from_list([1,2,3], 0)
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 0)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 0)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 0)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 0)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 0)
      let s = Stream.from_list([1,2,3], Stream.ORDERED() + Stream.DISTINCT() + Stream.SORTED() + Stream.SIZED() + Stream.IMMUTABLE())
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 1)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 1)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 1)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 1)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 1)
      unlet s
    End
  End

  Describe .from_dict()
    It constructs stream from Dictionary
      Assert Equals(Stream.from_dict({}).count(), 0)
      Assert Equals(Stream.from_dict({}).to_list(), [])
      Assert Equals(Stream.from_dict({"foo": 1}).count(), 1)
      Assert Equals(Stream.from_dict({"foo": 1}).to_list(), [["foo", 1]])
      Assert Equals(Stream.from_dict(
      \ {"foo": 1, "bar": 3, "baz": 2}).count(),
      \ 3)
      Assert Equals(
      \ sort(Stream.from_dict({"foo": 1, "bar": 3, "baz": 2}).to_list()),
      \ [["bar", 3], ["baz", 2], ["foo", 1]])
    End
    It constructs stream from Dictionary with characteristics
      let s = Stream.from_list({"foo": 1}, 0)
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 0)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 0)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 0)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 0)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 0)
      let s = Stream.from_list({"foo": 1}, Stream.ORDERED() + Stream.DISTINCT() + Stream.SORTED() + Stream.SIZED() + Stream.IMMUTABLE())
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 1)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 1)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 1)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 1)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 1)
      unlet s
    End
  End

  Describe .empty()
    It constructs empty stream
      Assert Equals(Stream.empty().count(), Stream.of().count())
      Assert Equals(Stream.empty().to_list(), Stream.of().to_list())
    End
  End

  Describe .has_characteristic()
    It checks if Stream.of(...) has certain characteristic
      let s = Stream.of(1,2,3)
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 1)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 0)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 0)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 1)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 1)
      unlet s
    End
    It checks if Stream.from_list(...) has certain characteristic
      let s = Stream.from_list([1,2,3])
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 1)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 0)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 0)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 1)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 1)
      unlet s
    End
    It checks if Stream.from_dict(...) has certain characteristic
      let s = Stream.from_dict({"foo": 1, "bar": 3, "baz": 2})
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 0)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 1)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 0)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 1)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 1)
      unlet s
    End
    It checks if Stream.iterate(...) has certain characteristic
      let s = Stream.iterate(1, 'v:val + 1')
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 1)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 0)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 0)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 0)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 1)
      unlet s
    End
    It checks if Stream.range(...) has certain characteristic
      let s = Stream.range(1,10)
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 1)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 1)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 1)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 1)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 1)
      unlet s
    End
    It checks if Stream.empty(...) has certain characteristic
      let s = Stream.empty()
      Assert Equals(s.has_characteristic(Stream.ORDERED()), 1)
      Assert Equals(s.has_characteristic(Stream.DISTINCT()), 0)
      Assert Equals(s.has_characteristic(Stream.SORTED()), 0)
      Assert Equals(s.has_characteristic(Stream.SIZED()), 1)
      Assert Equals(s.has_characteristic(Stream.IMMUTABLE()), 1)
      unlet s
    End
  End

  Describe .range()
    It constructs stream from range
      Assert Equals(
      \   Stream.range(1, 0).to_list(),
      \   [])
      Assert Equals(
      \   Stream.range(1, 1).to_list(),
      \   [])
      Assert Equals(
      \   Stream.range(1, 2).to_list(),
      \   [1])
      Assert Equals(
      \   Stream.range(1, 4).to_list(),
      \   [1,2,3])
    End
    It constructs limited range when .limit() was specified
      Assert Equals(
      \   Stream.range(1, 1/0).limit(5).to_list(),
      \   [1,2,3,4,5])
      Assert Equals(
      \   Stream.range(5, 1/0).limit(5).to_list(),
      \   [5,6,7,8,9])
    End
  End

  Describe .range_closed()
    It constructs stream from closed range
      Assert Equals(
      \   Stream.range_closed(1, 0).to_list(),
      \   [])
      Assert Equals(
      \   Stream.range_closed(1, 1).to_list(),
      \   [1])
      Assert Equals(
      \   Stream.range_closed(1, 2).to_list(),
      \   [1,2])
      Assert Equals(
      \   Stream.range_closed(1, 4).to_list(),
      \   [1,2,3,4])
    End
    It constructs limited range when .limit() was specified
      Assert Equals(
      \   Stream.range_closed(1, 1/0).limit(5).to_list(),
      \   [1,2,3,4,5])
      Assert Equals(
      \   Stream.range_closed(5, 1/0).limit(5).to_list(),
      \   [5,6,7,8,9])
    End
  End

  Describe .iterate()
    It constructs infinite stream with initial value and function
      for n in range(1, 10)
        Assert Equals(
        \   Stream.iterate(5, 'v:val + 1').limit(n).to_list(),
        \   range(5, 5 + n - 1))
      endfor
      unlet n
    End
  End

  Describe .generate()
    It constructs infinite stream with function
      Assert Equals(
      \ Stream.generate('42').limit(5).to_list(),
      \ [42, 42, 42, 42, 42])
    End
  End

  Describe .zip()
    It constructs infinite stream with function
      Assert Equals(
        \Stream.zip(
          \Stream.of(1,2,3),
          \Stream.of(4,5,6))
        \.to_list(),
        \[[1,4], [2,5], [3,6]])

      Assert Equals(
        \Stream.zip(
          \Stream.of(1,2),
          \Stream.of(4,5,6))
        \.to_list(),
        \[[1,4], [2,5]])

      Assert Equals(
        \Stream.zip(
          \Stream.of(1,2,3),
          \Stream.of(4,5))
        \.to_list(),
        \[[1,4], [2,5]])

      Assert Equals(
        \Stream.zip(
          \Stream.of(1),
          \Stream.of())
        \.to_list(),
        \[])

      Assert Equals(
        \Stream.zip(
          \Stream.of(),
          \Stream.of(1))
        \.to_list(),
        \[])

      Assert Equals(
        \Stream.zip(
          \Stream.iterate(1, 'v:val + 1'),
          \Stream.of(5, 4, 3, 2, 1))
        \.limit(5).to_list(),
        \[[1,5], [2,4], [3,3], [4,2], [5,1]])
    End
    It constructs infinite stream with function
      Assert Equals(
        \Stream.of(1,2,3).zip(Stream.of(4,5,6)).to_list(),
        \[[1,4], [2,5], [3,6]])
    End
  End

  Describe .concat()
    It constructs infinite stream with function
      Assert Equals(
        \Stream.concat(
          \Stream.of(1,2,3),
          \Stream.of(4,5))
        \.to_list(),
        \[1,2,3,4,5])

      Assert Equals(
        \Stream.concat(
          \Stream.of(1,2,3),
          \Stream.of())
        \.to_list(),
        \[1,2,3])

      Assert Equals(
        \Stream.concat(
          \Stream.of(),
          \Stream.of(4,5))
        \.to_list(),
        \[4,5])

      Assert Equals(
        \Stream.concat(
          \Stream.iterate(1, 'v:val + 1'),
          \Stream.of('this stream cannot be merged...'))
        \.limit(5).to_list(),
        \[1,2,3,4,5])

      Assert Equals(
        \Stream.concat(
          \Stream.of(1,2,3),
          \Stream.iterate(4, 'v:val + 1'))
        \.limit(5).to_list(),
        \[1,2,3,4,5])
    End
    It constructs infinite stream with function (method version)
      Assert Equals(
        \Stream.of(1,2,3).concat(Stream.of(4,5)).to_list(),
        \[1,2,3,4,5])
    End
  End

  Describe .limit()
    It limits stream
      Assert Equals(Stream.of(1,2,3,4,5).limit(3).to_list(), [1,2,3])
      Assert Equals(Stream.of(3,4,5,6,7).limit(3).to_list(), [3,4,5])

      " Must not reuse stream
      try
        let s = Stream.of(1,2,3,4,5)
        call s.to_list()
        call s.limit(3)
        Assert 1
      catch
        Assert 0
      endtry
      try
        let s = Stream.of(1,2,3,4,5)
        call s.to_list()
        call s.limit(3).to_list()
        Assert 0
      catch
        Assert 1
      endtry
      unlet s
    End
  End

  Describe .map()
    It maps stream
      let s = Stream.iterate(1, 'v:val + 1')
      Assert Equals(s.map('v:val + 1').limit(3).to_list(), [2,3,4])

      " Must not reuse stream
      try
        let s = Stream.of(1,2,3,4,5)
        call s.to_list()
        call s.map('v:val')
        Assert 1
      catch
        Assert 0
      endtry
      try
        let s = Stream.of(1,2,3,4,5)
        call s.to_list()
        call s.map('v:val').to_list()
        Assert 0
      catch
        Assert 1
      endtry
      unlet s
    End
  End

  Describe .filter()
    It filters stream
      let s = Stream.iterate(0, 'v:val + 1')
      Assert Equals(s.filter('v:val % 2 == 0').limit(3).to_list(), [0,2,4])

      " Must not reuse stream
      try
        let s = Stream.of(1,2,3,4,5)
        call s.to_list()
        call s.filter('v:val % 2 == 0')
        Assert 1
      catch
        Assert 0
      endtry
      try
        let s = Stream.of(1,2,3,4,5)
        call s.to_list()
        call s.filter('v:val % 2 == 0').to_list()
        Assert 0
      catch
        Assert 1
      endtry
      unlet s
    End
  End

  Describe .take_while()
    It takes elements until element is matched
      Assert Equals(Stream.empty().take_while('v:val').to_list(), [])
      Assert Equals(
      \ Stream.range(1, 10).take_while('v:val < 4').to_list(),
      \ [1,2,3])
      Assert Equals(
      \ Stream.range(1, 10).take_while('v:val < 4').limit(2).to_list(),
      \ [1,2])
      Assert Equals(
      \ Stream.iterate(1, 'v:val + 1').take_while('v:val < 4').to_list(),
      \ [1,2,3])
    End
  End

  Describe .drop_while()
    It drops elements until element is matched
      Assert Equals(
      \ Stream.empty().drop_while('v:val').to_list(),
      \ [])
      Assert Equals(
      \ Stream.of(1,2,3,4,5).drop_while('v:val < 4').to_list(),
      \ [4,5])
      Assert Equals(
      \ Stream.iterate(1, 'v:val + 1').drop_while('v:val < 4').limit(2).to_list(),
      \ [4,5])
    End
  End

  Describe .reduce()
    It reduces stream
      " Default {init} value is 0
      Assert Equals(Stream.empty().reduce('v:val'), 0)
      Assert Equals(Stream.empty().reduce('v:val', 42), 42)
      Assert Equals(Stream.of(1,2,3,4,5).reduce('v:val[0] + v:val[1]', 0), 15)
    End
  End

  Describe .max()
    It returns max value in stream
      " Default {init} value is 0
      Assert Equals(Stream.empty().max(), 0)
      Assert Equals(Stream.empty().max(42), 42)
      Assert Equals(Stream.of(1,2,3,4,5).max(), 5)
    End
  End

  Describe .max_by()
    It returns max value by function in stream
      Skip "this test kills Vim!"
      " Default {init} value is 0
      Assert Equals(Stream.empty().max_by('v:val'), 0)
      Assert Equals(Stream.empty().max_by('v:val', 42), 42)
      Assert Equals(Stream.of('aaa', 'bb', '').max_by('len(v:val)'), 'aaa')
    End
  End

  Describe .min()
    It returns min value in stream
      " Default {init} value is 0
      Assert Equals(Stream.empty().min(), 0)
      Assert Equals(Stream.empty().min(42), 42)
      Assert Equals(Stream.of(1,2,3,4,5).min(), 1)
    End
  End

  Describe .min_by()
    It returns min value by function in stream
      Skip "this test kills Vim!"
      " Default {init} value is 0
      Assert Equals(Stream.empty().min_by('v:val'), 0)
      Assert Equals(Stream.empty().min_by('v:val', 42), 42)
      Assert Equals(Stream.of('aaa', 'bb', '').min_by('len(v:val)'), '')
    End
  End

  Describe .find_first()
    It returns the first element in stream
      " Default {init} value is 0
      Assert Equals(Stream.empty().find_first(), 0)
      Assert Equals(Stream.empty().find_first(42), 42)
      Assert Equals(Stream.of('aaa', 'bb', '').find_first(), 'aaa')
      Assert Equals(Stream.iterate(1, 'v:val + 1').filter('v:val % 2 == 0').limit(1).find_first(), 2)
    End
  End

  Describe .find()
    It returns the first element matching with given predicate function in stream
      " Default {init} value is 0
      Assert Equals(Stream.empty().find('v:val'), 0)
      Assert Equals(Stream.empty().find('v:val', 42), 42)
      Assert Equals(Stream.iterate(1, 'v:val + 1').find('v:val % 2 == 0'), 2)
    End
  End

  Describe .any_match()
    It returns boolean value if any elements are matched in stream
      Assert Equals(Stream.empty().any_match('v:val'), 0)
      Assert Equals(Stream.of(1,2,3).any_match('v:val > 2'), 1)
      Assert Equals(Stream.of(1,2,3).any_match('v:val > 3'), 0)
    End
  End

  Describe .all_match()
    It returns boolean value if all elements are matched in stream
      Assert Equals(Stream.empty().all_match('v:val'), 1)
      Assert Equals(Stream.of(1,2,3).all_match('v:val > 0'), 1)
      Assert Equals(Stream.of(1,2,3).all_match('v:val > 1'), 0)
    End
  End

  Describe .none_match()
    It returns boolean value if none elements are matched in stream
      Assert Equals(Stream.empty().none_match('v:val'), 1)
      Assert Equals(Stream.of(1,2,3).none_match('v:val > 3'), 1)
      Assert Equals(Stream.of(1,2,3).none_match('v:val > 2'), 0)
    End
  End

  Describe .count()
    It counts elements in stream
      Assert Equals(Stream.of().count(), 0)
      Assert Equals(Stream.of(1,2,3).count(), 3)
      Assert Equals(Stream.iterate(1, 'v:val + 1').count(), 1/0)
    End
  End

  Describe .to_list()
    It converts stream to a List
      Assert Equals(Stream.of(1,2,3).to_list(), [1,2,3])

      " Must not reuse stream
      try
        let s = Stream.of(1,2,3,4,5)
        call s.to_list()
        call s.to_list()
        Assert 0
      catch
        Assert 1
      endtry
      unlet s
    End
  End

End
