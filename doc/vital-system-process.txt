*vim-system-process.txt*	Cross platform process executor

Maintainer: lambdalisue		<lambdalisue@hashnote.net>

=============================================================================
CONTENTS				*Vital.System.Process-contents*

Introduction			|Vital.System.Process-introduction|
Install				|Vital.System.Process-install|
Usage				|Vital.System.Process-usage|
Functions			|Vital.System.Process-functions|
Developers			|Vital.System.Process-developers|


=============================================================================
INTRODUCTION				*Vital.System.Process-introduction*

|Vital.System.Process| provides a cross-platform functions to execute process.


=============================================================================
USAGE						*Vital.System.Process-usage*
>
	let s:Process = s:V.import('System.Process')
	let result = s:Process.execute([
	    \ 'git', 'rev-parse', '--is-inside-work-tree',
	    \])
	echo result.output
	" => true
<

=============================================================================
FUNCTIONS				*Vital.System.Process-functions*

				*Vital.System.Process.iconv()*
iconv({expr}, {from}, {to})
	An alternate function of builtin |iconv()| which fail silently.
	It returns {expr} when conversion has failed.

				*Vital.System.Process.repair_posix_text()*
repair_posix_text({text}[, {newline}])
	It returns {text} with a trailing {newline} if no trailing {newline}
	exists. If {newline} is omitted, "\n" will be used.
>
	echo s:Process.repair_posix_text("A\nB\nC")
	" => A\nB\nC\n
	echo s:Process.repair_posix_text("A\nB\nC\n")
	" => A\nB\nC\n
	echo s:Process.repair_posix_text("A\nB\nC\n\n")
	" => A\nB\nC\n\n
<
				*Vital.System.Process.join_posix_lines()*
join_posix_lines({lines}[, {newline}])
	It returns a {newline} joined |String| of {lines} with a trailing
	{newline}. If {newline} is omitted, "\n" will be used.
>
	echo s:Process.join_posix_lines(['A', 'B', 'C'])
	" => A\nB\nC\n
	echo s:Process.join_posix_lines(['A', 'B', 'C', ''])
	" => A\nB\nC\n\n
<
				*Vital.System.Process.split_posix_text()*
split_posix_text({text}[, {newline}])
	It returns a {newline} separated |List| of {text} without an item for
	trailing {newline} in {text}.
	While POSIX text has a trailing {newline}, splitting text directly
	with |split()| function returns a |List| with an additional empty
	line. This function automatically remove a trailing {newline} when
	exists, indicating that if {text} does not have a trailing {newline},
	it is equal to 'split({text}, {newline}, 1)'.
	If {newline} is omitted, "\n" will be used.
>
	echo s:Process.split_posix_text("A\nB\nC\n")
	" => ['A', 'B', 'C']
	echo s:Process.split_posix_text("A\nB\nC")
	" => ['A', 'B', 'C']
	echo s:Process.split_posix_text("A\nB\nC\n\n")
	" => ['A', 'B', 'C', '']
<
				*Vital.System.Process.execute()*
execute({args}[, {options}])
	Execute a process specified by {args} (|List|).
	It tries process clients listed in 'clients' attribute of {options}
	and return a result |Dictionary| when a client supports {options}.
	Otherwise it raises an exception 'None of client support options:'.

	The following attributes are supported in {options}

		'clients'
		A |List| of client names registered by register() function.
		The order of appearance is equal to the order of trial.
		When vimproc is available, System.Process.Vimproc will be
		listed prior to the System.Process.System in default.

		'input'
		A |String| or |Number|. If |String| is specified, the value will be
		passed to the process through the stdin. If |Number| is
		specified, no value will be passed to the process.

		'timeout'
		A process timeout in seconds (|Number|). A system process
		client does not support this option, mean that vimproc is
		required to be available.

		'background'
		If 1, the process will be executed in background. A system
		process client does not support this option in Windows, mean
		that vimproc is required to be available to use in Windows.
		When the process is executed in background, the 'success' in
		{result} be always 1.

		'encode_input'
		A |String| or |Number|. If 1 is specified, 'input' value will be
		encoded by |iconv()| from |&encoding| to 'char'. If |String| is
		specified, it will be encoded from a value of 'encode_input'
		to 'char'.

		'encode_output'
		A |String| or |Number|. If 1 is specified, 'output' value in
		{result} will be encoded by |iconv()| from 'char' to |&encoding|.
		If |String| is specified, it will be encoded from 'char' to a
		value of 'encode_output'.

		'embed_content'
		If 1, a POSIX |List| of 'output' value in {result} will be
		embed into {result} dictionary as 'content'.
		It uses |Vital.Process.split_posix_text()| internally.

	The following attributes exists in {result} dictionary and the value
	should be equal among clients and environments:

		'success'
		0 or 1 to indicate whether the process exit without
		exceptions.

		'output'
		An output |String| of the process. It is encoded if
		'encode_output' is specified in {options}.

		'args'
		An argument |List| used for executing a process.

		'options'
		An option |Dictionary| used for executing a process.

	Additionally, the following attributes may exist. The value depends
	on the client used (non cross-platform values):

		'status'
		A exit status of the process.

		'cmdline'
		An actual cmdline string used to execute the process.

		'errormsg'
		A human readable error message for the process fail.

	Note that when |&verbose| is grater than 0, it echo which client is
	used and the actual cmdline, for debugging.


=============================================================================
DEVELOPERS				*Vital.System.Process-developers*

A process client module requires the following three methods.

				*Vital.System.Process.Client.is_available()*
is_available()
	Return 0 or 1 to indicate if the module is available in a Vim.
	Modules which return 0 in this function will never be registered.

				*Vital.System.Process.Client.is_supported()*
is_supported({options})
	Return 0 or 1 to indicate if the module support a specified {options}.
	Modules which return 0 in this function will be skipped.

				*Vital.System.Process.Client.execute()*
execute({args}, {options})
	Execute a process specified by {args}. This method need to return a
	{result} |Dictionary| which must contains 'success' and 'output'. Any
	other attributes are optional.
	Note that 'input' should be encoded prior to the method (if user
	want), so should not encode without particular reasons.
	Note that 'output' will be encoded posterior to the method (if user
	want), so should not encode without particular reasons.
	Note that the method should echo actual command and module name when
	|&verbose| is grater than 0, for example:
>
	if &verbose > 0
	  echomsg printf(
	    \ 'vital: System.Process.XXXXX: %s',
	    \ cmdline,
	    \)
	endif
<
When you create a new process client, register that with the following
function in 's:_vital_loaded()' function of Vital.System.Process module.

				*Vital.System.Process.register()*
register({name})
	Register a {name} Vital module as a process client.
	It only register when 'is_available()' method of the module returns
	truth value.
	The order of the registration effect the default priority of the
	clients.


=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
